server:
  port: 10000
  servlet:
    context-path: /sso

spring:
  application:
    name: springboot-sso-server
  cloud:
    config:
      uri: ${CONFIG_SERVER:http://forsrc.local:12000/config}
  boot:
    admin:
      client:
        url:      ${ADMIN_SERVER:http://forsrc.local:13000}
        username: forsrc@gmail.com
        password: forsrc
  datasource:
    url:                 ${DB_URL:jdbc:h2:c:/tmp/db/h2/sso.h2;AUTO_SERVER=TRUE;MODE=MYSQL;}
    username:            ${DB_USERNAME:sa}
    password:            ${DB_PASSWORD:sa}
    driver-class-name:   ${DB_DRIVER:org.h2.Driver}
#    schema:
#    - classpath:schema.sql
    data:
    - classpath:schema.sql
    - classpath:data.sql
  jpa:
    database-platform:   ${DB_DIALECT:org.hibernate.dialect.H2Dialect}
    show-sql:            true
    hibernate:
      ddl-auto:          create
    properties:
      hibernate:
        enable_lazy_load_no_trans: true
  aop:
    proxy-target-class: true

  cache:
    type: redis
  redis:
    host: ${REDIS_HOST:127.0.0.1}
    port: ${REDIS_PORT:6379}
  thymeleaf:
    prefix: 'classpath:public/mypig/www/'
    suffix: .html
    cache: false

  zipkin:
    service:
      name:   ${spring.application.name}
    enabled:  true
    base-url: ${ZIPKIN_SERVER:http://forsrc.local:11110}
  sleuth:
    traceId128: true
    sampler:
      probability: 1.0

security:
  oauth2:
    #sso:
      #filter-order: 3
    authorization:
      token-key-access: permitAll()
    client:
      access-token-uri:       ${SSO_SERVER:http://forsrc.local:10000}/sso/oauth/token
      user-authorization-uri: ${SSO_SERVER:http://forsrc.local:10000}/sso/oauth/authorize
      client-id:              sso
      client-secret:          forsrc
      scope:                  read, write
    resource:
      userInfoUri:            /me
      preferTokenInfo:        false
      id:                     forsrc
      token-info-uri:         /oauth/check_token

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS



feign:
  hystrix:
    enabled: true
ribbon:
  ReadTimeout:    10000
  ConnectTimeout:  2000
hystrix:
  command:
    default:
      execution.isolation.thread.timeoutInMilliseconds: 10000


eureka:
  instance:
    leaseRenewalIntervalInSeconds: 10
    home-page-url:                 ${HOST_NAME:http://forsrc.local:${server.port}}${server.servlet.context-path}/actuator
    health-check-url:              ${eureka.instance.home-page-url}/health
    status-page-url:               ${eureka.instance.home-page-url}/info
    metadata-map:
      user.name:                   forsrc@gmail.com
      user.password:               forsrc
  client:
    registryFetchIntervalSeconds:  5
    serviceUrl:
      defaultZone:                 ${EUREKA_SERVER:http://forsrc.local:11100/eureka}

tcc:
  ws: ${TCC_WS:ws://forsrc.local:10020/tcc/ws/tcc}
