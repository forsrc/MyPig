server:
  port: 10000
  http:
    port: 10001
    http2https: false
  max-http-header-size: 4048576
  # keytool -genkeypair -keyalg RSA -keysize 2048 -alias mypig-sso-server -dname "CN=mypig-sso-server,OU=forsrc,O=forsrc,C=CN" -ext "san=DNS:mypig-sso-server" -validity 3650 -keystore mypig-sso-server.jks -storepass forsrc -keypass forsrc -deststoretype pkcs12
  # keytool -alias mypig-sso-server -exportcert -keystore mypig-sso-server.jks -file mypig-sso-server.cer -storepass forsrc
  # keytool -import -alias mypig-sso-server -keystore %JAVA_HOME%\jre\lib\security\cacerts -file mypig-sso-server.cer -trustcacerts -storepass changeit
  # keytool -delete -alias mypig-sso-server -keystore %JAVA_HOME%\jre\lib\security\cacerts -file mypig-sso-server.cer -storepass changeit
  ssl:
    key-store-provider:   SUN
    key-store-type:       JKS #PKCS12
    key-store:            classpath:ssl/mypig-sso-server.jks
    key-store-password:   forsrc
    key-alias:            mypig-sso-server
    enabled:              true
  servlet:
    context-path: /sso
  tomcat:
    remote-ip-header: "X-Forwarded-For"
    protocol-header: "X-Forwarded-Proto"
    protocol-header-https-value: "https"

mypig:
  feignClient:
    sso:
      name: MYPIG-SSO-SERVER
      path: /sso/api/v1/tcc/user
      url:  ${SSO_SERVER:https://mypig-sso-server:10000}
    tcc:
      name: MYPIG-TCC
      path: /tcc/api/v1/tcc
      url:  ${TCC_SERVER:http://mypig-tcc:10020}

spring:
  application:
    name: mypig-sso-server
  cloud:
    config:
      uri: ${CONFIG_SERVER:http://mypig-config-server:12000/config}
  boot:
    admin:
      client:
        url:      ${ADMIN_SERVER:http://mypig-admin-server:13000}
        username: forsrc@gmail.com
        password: forsrc
  datasource:
    url:                 ${DB_URL:jdbc:h2:/tmp/db/h2/sso.h2;AUTO_SERVER=TRUE;MODE=MYSQL;}
    username:            ${DB_USERNAME:sa}
    password:            ${DB_PASSWORD:sa}
    driver-class-name:   ${DB_DRIVER:org.h2.Driver}
#    schema:
#    - classpath:schema.sql
    data:
    - classpath:schema.sql
    - classpath:data.sql
  jpa:
    database-platform:   ${DB_DIALECT:org.hibernate.dialect.H2Dialect}
    show-sql:            true
    hibernate:
      ddl-auto:          create
      enable_lazy_load_no_trans: true
    properties:
      hibernate.enable_lazy_load_no_trans: true
      hibernate.show-sql:                  true
    open-in-view: true
  aop:
    proxy-target-class: true

  cache:
    type: redis
    cacheTtls:
    - cacheName: spring/cache/sso/User
      ttl: 10
    - cacheName: spring/cache/sso/User/pages
      ttl: 10
    - cacheName: spring/cache/sso/Authority
      ttl: 10
  session:
    store-type: redis
    redis:
      flush-mode: ON_SAVE
  redis:
    host: ${REDIS_HOST:mypig-redis}
    port: ${REDIS_PORT:6379}
  thymeleaf:
    prefix: 'classpath:/templates/'
    suffix: .html
    cache:  false

  zipkin:
    service:
      name:   ${spring.application.name}
    enabled:  true
    base-url: ${ZIPKIN_SERVER:http://mypig-zipkin-server:11110}

  sleuth:
    traceId128: true
    sampler:
      probability: 1.0

security:
  oauth2:
    host:                     ${SSO_SERVER:https://mypig-sso-server:10000}
    #sso:
      #filter-order: 3
    authorization:
      token-key-access:       permitAll()
    client:
      access-token-uri:       ${security.oauth2.host}/sso/oauth/token
      user-authorization-uri: ${security.oauth2.host}/sso/oauth/authorize
      client-id:              sso
      client-secret:          forsrc
      scope:                  sso, read, write
    resource:
      #filter-order:           3
      userInfoUri:            ${security.oauth2.host}/sso/me
      preferTokenInfo:        false
      id:                     sso
      token-info-uri:         ${security.oauth2.host}/sso/oauth/check_token

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

feign:
  hystrix:
    enabled: false
ribbon:
  ReadTimeout:     10000
  ConnectTimeout:  2000
#  IsSecure:        true
hystrix:
  command:
    default:
      execution.isolation.thread.timeoutInMilliseconds: 10000


eureka:
  instance:
#    nonSecurePortEnabled:          false
#    securePortEnabled:             true
#    securePort:                    ${server.port}
#    secureVirtualHostName:         ${spring.application.name}
    leaseRenewalIntervalInSeconds: 10
    home-page-url:                 ${HOST_NAME:http://mypig-sso-server:${server.port}}${server.servlet.context-path}/actuator
    health-check-url:              ${eureka.instance.home-page-url}/health
    status-page-url:               ${eureka.instance.home-page-url}/info
    metadata-map:
      user.name:                   forsrc@gmail.com
      user.password:               forsrc
  client:
    registryFetchIntervalSeconds:  5
    serviceUrl:
      defaultZone:                 ${EUREKA_SERVER:http://mypig-eureka-server:11100/eureka}

tcc:
  ws: ${TCC_WS:ws://mypig-tcc:10020/tcc/ws/tcc}


logging:
  level:
    org.springframework.*: INFO