

spring:
  application:
    name: microservice-tcc
  cloud:
    config:
      uri: http://forsrc.local:12000/config
  boot:
    admin:
      url: http://forsrc.local:13000

  cache:
    type: redis
  redis:
    host: 127.0.0.1
    port: 6379

  datasource:
    url:               jdbc:postgresql://forsrc.local:5432/tcc # jdbc:h2:/tmp/db/h2/tcc.h2;AUTO_SERVER=TRUE;MODE=MYSQL;
    username:          postgres
    password:          postgres
    driver-class-name: org.postgresql.Driver # org.h2.Driver
    schema:
    - classpath:schema.sql
    data:
    - classpath:data.sql
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect # org.hibernate.dialect.H2Dialect
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        enable_lazy_load_no_trans: true

  zipkin:
    service:
      name:  ${spring.application.name}
    enabled: true
    base-url: http://forsrc.local:11110

  artemis:
    embedded:
      queues: jms/queues/tcc

com.atomikos:
  icatch.service: com.atomikos.icatch.standalone.UserTransactionServiceFactory


security:
  oauth2:
    client:
      access-token-uri:       http://forsrc.local:10000/sso/oauth/token
      user-authorization-uri: http://forsrc.local:10000/sso/oauth/authorize
      client-id:              tcc
      client-secret:          forsrc
      scope:                  read, write
    resource:
      filter-order:           3
      userInfoUri:            http://forsrc.local:10000/sso/me
      preferTokenInfo:        false
      id:                     forsrc
      token-info-uri:         http://forsrc.local:10000/sso/oauth/check_token

management:
  context-path: /mgmt
  security:
    enabled: false

server:
  port: 10020
  context-path: /tcc

eureka:
  instance:
    home-page-url: http://forsrc.local:${server.port}${server.context-path}
    health-check-url: http://forsrc.local:${server.port}${server.context-path}/mgmt/health
    status-page-url: http://forsrc.local:${server.port}${server.context-path}/mgmt/info
  client:
    serviceUrl:
      defaultZone: http://forsrc.local:11100/eureka

springboot-sso-server:
  ribbon:
    eureka:
      enabled: true
    listOfServers: forsrc.local:10000
    ServerListRefreshInterval: 15000
microservice-tcc:
  ribbon:
    eureka:
      enabled: true
    listOfServers: forsrc.local:10020
    ServerListRefreshInterval: 15000

feign:
  hystrix:
    enabled: true
ribbon:
  ReadTimeout:    10000
  ConnectTimeout:  2000
hystrix:
  command:
    default:
      execution.isolation.thread.timeoutInMilliseconds: 10000

logging:
  level:
    org.springframework.jms.listener.DefaultMessageListenerContainer: WARN
